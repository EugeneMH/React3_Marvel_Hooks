{"ast":null,"code":"var _jsxFileName = \"/Applications/MAMP/htdocs/React-Marvel/src/components/charList/CharList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useMemo } from 'react';\nimport useMarvelService from '../../services/service';\nimport Spinner from '../spinner/Spinner';\nimport Error from '../error/Error';\nimport './charList.scss';\nimport PropTypes from 'prop-types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst setListContent = (process, Component, loadingNewChars) => {\n  switch (process) {\n    case 'waiting':\n      return /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 20\n      }, this);\n    case 'loading':\n      return loadingNewChars ? /*#__PURE__*/_jsxDEV(Component, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 38\n      }, this) : /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 53\n      }, this);\n    case 'error':\n      return /*#__PURE__*/_jsxDEV(Error, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 20\n      }, this);\n    case 'confirmed':\n      return /*#__PURE__*/_jsxDEV(Component, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 20\n      }, this);\n    default:\n      throw new Error('Unexpected process state');\n  }\n};\nconst CharList = props => {\n  _s();\n  const {\n    getAllCharacters,\n    process,\n    setProcess\n  } = useMarvelService();\n  const [chars, setChars] = useState([]);\n  const [offset, setOffset] = useState(180);\n  const [loadingNewChars, setLoadingNewChars] = useState(true);\n  const [charsCapReached, setCharsCap] = useState(false);\n  useEffect(() => {\n    requestCharacters(offset, true);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  const requestCharacters = (offset, initial) => {\n    initial ? setLoadingNewChars(false) : setLoadingNewChars(true);\n    getAllCharacters(offset).then(res => onFinishedLoading(res)).then(() => setProcess('confirmed'));\n  };\n  const onFinishedLoading = newCharacters => {\n    let ended = false;\n    if (newCharacters.length < 9) ended = true;\n    setChars(chars => [...chars, ...newCharacters]);\n    setOffset(offset => offset + 9);\n    setLoadingNewChars(false);\n    setCharsCap(ended);\n  };\n  const refsItems = useRef([]);\n  const focusOnItem = id => {\n    refsItems.current.forEach(item => {\n      item.classList.remove('char__item_selected');\n    });\n    refsItems.current[id].classList.add('char__item_selected');\n    refsItems.current[id].focus();\n  };\n  const createContent = arr => {\n    const blocks = arr.map((item, i) => {\n      let imgStyles = {\n        'objectFit': 'cover'\n      };\n      if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyles = {\n          'objectFit': 'unset'\n        };\n      }\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"char__item\",\n        tabIndex: 0,\n        ref: el => refsItems.current[i] = el,\n        onClick: () => {\n          props.onSelectChar(item.id);\n          focusOnItem(i);\n        },\n        onKeyPress: e => {\n          if (e.key === ' ' || e.key === 'Enter') {\n            props.onSelectChar(item.id);\n            focusOnItem(i);\n          }\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: item.thumbnail,\n          alt: item.name,\n          style: imgStyles\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"char__name\",\n          children: item.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 21\n        }, this)]\n      }, item.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this);\n    });\n    return /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"char__grid\",\n      children: blocks\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this);\n  };\n  const content = useMemo(() => {\n    return setListContent(process, () => createContent(chars), loadingNewChars);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [process]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"char__list\",\n    children: [content, /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"button button__main button__long\",\n      onClick: () => requestCharacters(offset, false),\n      disabled: loadingNewChars,\n      style: {\n        'display': charsCapReached ? 'none' : 'block'\n      },\n      tabIndex: 0,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inner\",\n        children: \"load more\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 9\n  }, this);\n};\n_s(CharList, \"36pfF4lSSdUV7nUbCYzXBe/pCLY=\", false, function () {\n  return [useMarvelService];\n});\n_c = CharList;\nCharList.propTypes = {\n  onSelectChar: PropTypes.func.isRequired\n};\nexport default CharList;\nvar _c;\n$RefreshReg$(_c, \"CharList\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useMemo","useMarvelService","Spinner","Error","PropTypes","setListContent","process","Component","loadingNewChars","CharList","props","getAllCharacters","setProcess","chars","setChars","offset","setOffset","setLoadingNewChars","charsCapReached","setCharsCap","requestCharacters","initial","then","res","onFinishedLoading","newCharacters","ended","length","refsItems","focusOnItem","id","current","forEach","item","classList","remove","add","focus","createContent","arr","blocks","map","i","imgStyles","thumbnail","el","onSelectChar","e","key","name","content","propTypes","func","isRequired"],"sources":["/Applications/MAMP/htdocs/React-Marvel/src/components/charList/CharList.js"],"sourcesContent":["import React, {useState, useEffect, useRef, useMemo} from 'react';\nimport useMarvelService from '../../services/service';\nimport Spinner from '../spinner/Spinner';\nimport Error from '../error/Error';\n\nimport './charList.scss';\n\nimport PropTypes from 'prop-types';\n\nconst setListContent = (process, Component, loadingNewChars) => {\n    switch (process) {\n        case 'waiting': \n            return <Spinner/>;\n        case 'loading':\n            return loadingNewChars ? <Component/> : <Spinner/>;\n        case 'error':\n            return <Error/>;\n        case 'confirmed':\n            return <Component/>;\n        default: \n            throw new Error('Unexpected process state');\n    }\n}\n\nconst CharList = (props) => {\n\n    const {getAllCharacters, process, setProcess} = useMarvelService();\n\n    const [chars, setChars] = useState([]);\n    const [offset, setOffset] = useState(180);\n    const [loadingNewChars, setLoadingNewChars] = useState(true);\n    const [charsCapReached, setCharsCap] = useState(false);\n\n    useEffect(() => {\n        requestCharacters(offset, true);   \n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const requestCharacters = (offset, initial) => {\n        initial ? setLoadingNewChars(false) : setLoadingNewChars(true)\n \n        getAllCharacters(offset)\n            .then(res => onFinishedLoading(res))\n            .then(() => setProcess('confirmed'))\n    }\n\n    const onFinishedLoading = (newCharacters) => {\n\n        let ended = false;\n        if (newCharacters.length < 9) ended = true;\n\n        setChars(chars => [...chars, ...newCharacters]);\n        setOffset(offset => offset + 9);\n        setLoadingNewChars(false);\n        setCharsCap(ended);\n    }\n\n    const refsItems = useRef([]);\n\n    const focusOnItem = (id) => {\n       refsItems.current.forEach(item => {\n           item.classList.remove('char__item_selected');\n       })\n       refsItems.current[id].classList.add('char__item_selected');\n       refsItems.current[id].focus();\n    }\n\n    const createContent = (arr) => {\n\n        const blocks = arr.map((item, i) => {\n\n            let imgStyles = {'objectFit':'cover'};\n\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg' ) {\n                imgStyles = {'objectFit':'unset'}\n            }\n            \n            return (\n                <li className=\"char__item\" \n                key={item.id}\n                tabIndex={0}\n                ref={el => refsItems.current[i] = el}\n                onClick={() => {\n                    props.onSelectChar(item.id);\n                    focusOnItem(i)\n                    }}\n                onKeyPress={(e) => {\n                    if (e.key === ' ' || e.key === 'Enter') {\n                        props.onSelectChar(item.id);\n                        focusOnItem(i);\n                    }\n                }}>\n                    <img src={item.thumbnail} alt={item.name} style={imgStyles}/>\n                    <div className=\"char__name\">{item.name}</div>\n                </li>\n            )\n        })\n\n        return (\n            <ul className=\"char__grid\" >\n                {blocks}\n            </ul>\n        )\n    }\n\n    const content = useMemo(() => {\n        return setListContent(process, () => createContent(chars), loadingNewChars)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [process])\n\n    return (\n        <div className=\"char__list\">\n            {content}\n            <button className=\"button button__main button__long\"\n                    onClick={() => requestCharacters(offset, false)}\n                    disabled={loadingNewChars}\n                    style={{'display' : charsCapReached ? 'none' : 'block'}}\n                    tabIndex={0}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n        )\n}\n\nCharList.propTypes = {\n    onSelectChar: PropTypes.func.isRequired\n}\n\nexport default CharList;"],"mappings":"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"},"metadata":{},"sourceType":"module"}