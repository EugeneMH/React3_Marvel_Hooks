{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback } from 'react';\nconst useHttp = () => {\n  _s();\n  const [process, setProcess] = useState('waiting');\n  const request = useCallback(async function (url) {\n    let method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'GET';\n    let body = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    let headers = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {\n      'Content-type': 'application/json'\n    };\n    setProcess('loading');\n    try {\n      const response = await fetch(url, {\n        method,\n        body,\n        headers\n      });\n      if (!response.ok) {\n        throw new Error(`Could not fetch${url}, status ${response.status}`);\n      }\n      const data = await response.json();\n      return data;\n    } catch (e) {\n      setProcess('error');\n      throw e;\n    }\n  }, []);\n  const clearError = useCallback(() => {\n    setProcess('loading');\n  }, []);\n  return {\n    request,\n    clearError,\n    process,\n    setProcess\n  };\n};\n_s(useHttp, \"qtD5Ak46pkdtiKA9sffv0tgvE4k=\");\nexport default useHttp;","map":{"version":3,"names":["useState","useCallback","useHttp","process","setProcess","request","url","method","body","headers","response","fetch","ok","Error","status","data","json","e","clearError"],"sources":["/Applications/MAMP/htdocs/React-Marvel/src/hooks/http.hook.js"],"sourcesContent":["import {useState, useCallback} from 'react';\n\nconst useHttp = () => {\n    const [process, setProcess] = useState('waiting');\n\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-type': 'application/json'}) => {\n        setProcess('loading');\n\n        try {\n            const response = await fetch(url, {method, body, headers});\n\n            if (!response.ok) {  \n                throw new Error(`Could not fetch${url}, status ${response.status}`);\n            }\n\n            const data = await response.json();\n            return data;\n        } catch(e) {\n            setProcess('error');\n            throw e;\n        }\n    }, [])\n\n    const clearError = useCallback(() => {\n        setProcess('loading');\n    }, [])\n\n    return { request, clearError, process, setProcess}\n}\n\nexport default useHttp;"],"mappings":";AAAA,SAAQA,QAAQ,EAAEC,WAAW,QAAO,OAAO;AAE3C,MAAMC,OAAO,GAAG,MAAM;EAAA;EAClB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGJ,QAAQ,CAAC,SAAS,CAAC;EAEjD,MAAMK,OAAO,GAAGJ,WAAW,CAAC,gBAAOK,GAAG,EAAkF;IAAA,IAAhFC,MAAM,uEAAG,KAAK;IAAA,IAAEC,IAAI,uEAAG,IAAI;IAAA,IAAEC,OAAO,uEAAG;MAAC,cAAc,EAAE;IAAkB,CAAC;IAC/GL,UAAU,CAAC,SAAS,CAAC;IAErB,IAAI;MACA,MAAMM,QAAQ,GAAG,MAAMC,KAAK,CAACL,GAAG,EAAE;QAACC,MAAM;QAAEC,IAAI;QAAEC;MAAO,CAAC,CAAC;MAE1D,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE;QACd,MAAM,IAAIC,KAAK,CAAE,kBAAiBP,GAAI,YAAWI,QAAQ,CAACI,MAAO,EAAC,CAAC;MACvE;MAEA,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,EAAE;MAClC,OAAOD,IAAI;IACf,CAAC,CAAC,OAAME,CAAC,EAAE;MACPb,UAAU,CAAC,OAAO,CAAC;MACnB,MAAMa,CAAC;IACX;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,UAAU,GAAGjB,WAAW,CAAC,MAAM;IACjCG,UAAU,CAAC,SAAS,CAAC;EACzB,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IAAEC,OAAO;IAAEa,UAAU;IAAEf,OAAO;IAAEC;EAAU,CAAC;AACtD,CAAC;AAAA,GA1BKF,OAAO;AA4Bb,eAAeA,OAAO"},"metadata":{},"sourceType":"module"}