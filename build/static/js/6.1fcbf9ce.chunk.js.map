{"version":3,"sources":["components/comicsList/ComicsList.js","components/pages/ComicsPage.js","components/error/error.gif","components/error/Error.js","hooks/http.hook.js","services/service.js","components/skeleton/Skeleton.js","components/errorBoundary/ErrorBoundary.js","resources/img/Avengers.png","resources/img/Avengers_logo.png","components/appBanner/AppBanner.js"],"names":["setListContent","process","Component","loadingNewComics","skeleton","Error","ComicsList","useState","comicsCapReached","setComicsCap","setLoadingNewComics","comics","setComics","offset","setOffset","useMarvelService","setProcess","getAllComics","clearError","useEffect","requestComics","initial","then","res","onFinishedLoading","newComics","ended","length","loading","Array","map","item","i","className","Skeleton","to","id","src","thumbnail","alt","name","price","disabled","onClick","style","ComicsPage","Helmet","content","AppBanner","ErrorBoundary","path","element","img","margin","height","width","display","color","textAlign","useHttp","request","useCallback","url","method","body","headers","fetch","response","ok","status","json","data","_apiBase","_apiKey","_baseOffset","getAllCharacters","results","_transformCharacter","getCharacter","getComic","_transformComics","getCharacterByName","char","limitLetters","charDescription","description","slice","items","extension","homepage","urls","wiki","title","pageCount","prices","language","textObjects","props","state","hasError","error","errorInfo","console","log","this","children","avengers","avengersLogo"],"mappings":"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","file":"static/js/6.1fcbf9ce.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport Skeleton from '../skeleton/Skeleton'\nimport Error from '../error/Error';\nimport './comicsList.scss';\n\nimport useMarvelService from '../../services/service';\n\nconst setListContent = (process, Component, loadingNewComics, skeleton) => {\n    switch (process) {\n        case 'waiting': \n            return skeleton;\n        case 'loading':\n            return loadingNewComics ? <><Component/>{skeleton}</> : skeleton;\n        case 'error':\n            return <Error/>;\n        case 'confirmed':\n            return <Component/>;\n        default: \n            throw new Error('Unexpected process state');\n    }\n}\n\nconst ComicsList = () => {\n\n    const [comicsCapReached, setComicsCap] = useState(false);\n    const [loadingNewComics, setLoadingNewComics] = useState(false);\n    const [comics, setComics] = useState([])\n    const [offset, setOffset] = useState(10)\n\n    const {process, setProcess, getAllComics, clearError} = useMarvelService();\n\n    useEffect(() => {\n        requestComics(offset, true);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    const requestComics = (offset, initial) => {\n        clearError();\n        initial ? setLoadingNewComics(false) : setLoadingNewComics(true);\n\n        getAllComics(offset)\n        .then(res => {\n            onFinishedLoading(res)})\n        .then(() => setProcess('confirmed'))\n    }\n\n    const onFinishedLoading = (newComics) => {\n        let ended = false;\n        if (newComics.length < 8) ended = true;\n\n        setComics(comics => [...comics, ...newComics]);\n        setOffset(offset => offset + 8);\n        setLoadingNewComics(false);\n        setComicsCap(ended);\n    }\n\n    const createContent = (arrComics) => {\n\n        return arrComics.map((item, i) => {\n            return (\n                <li className=\"comics__item\" key={i}>\n                    <Link to={`/comics/${item.id}`}>\n                        <img src={item.thumbnail} alt={item.thumbnail} className=\"comics__item-img\"/>\n                        <div className=\"comics__item-name\">{item.name}</div>\n                        <div className=\"comics__item-price\">{item.price + '$'}</div>\n                    </Link>\n                </li>\n            )\n        })\n    }\n\n    const createLoading = () => {\n        return [...Array(8)].map((item, i) => {\n            return (\n                <li className=\"comics__item\" key={i}>\n                    <Skeleton/>\n                </li>\n            )\n        })\n    }\n\n    const loading = createLoading();\n    \n    return (\n        <>\n\n            <div className=\"comics__list\">   \n                <ul className=\"comics__grid\">\n                {setListContent(process, () => createContent(comics), loadingNewComics, loading)}\n                </ul>\n                <button className=\"button button__main button__long\" disabled={loadingNewComics}>\n                    <div className=\"inner\" \n                    onClick={() => requestComics(offset, false)}\n                    style={{'display' : comicsCapReached ? 'none' : 'block'}}>load more</div>\n                </button>\n            </div>\n        </>\n    )\n}\n\nexport default ComicsList;","import {Helmet} from \"react-helmet\";\n\nimport ErrorBoundary from '../errorBoundary/ErrorBoundary';\nimport ComicsList from '../comicsList/ComicsList';\nimport AppBanner from '../appBanner/AppBanner';\n\nimport { Routes, Route } from 'react-router-dom';\n\nconst ComicsPage = () => {\n    return (\n        <>\n            <Helmet>\n                <title>Marvel Comics list</title>\n                <meta name=\"description\" content=\"List of Marvel Comics\" />\n            </Helmet>\n            <AppBanner/>\n            <ErrorBoundary>\n                <Routes>\n                    <Route path=\"/\" element={<ComicsList/>}/>\n                </Routes>\n            </ErrorBoundary>\n        </>\n    )\n}\n\nexport default ComicsPage;","export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif';\n\nconst Error = () => {\n    return (\n        <div style={{'display': 'flex', \n                     'flexDirection':'column',\n                     'fontWeight': 'bold',\n                     'fontSize': '18px',\n                     'lineHeight': '29px'}}>\n            <img src={img} alt=\"Error\" style={{margin:' 0 auto', \n            height:'250px', \n            width:'250px', \n            display:'block'}}/>\n            <span style={{color: '#9F0013', textAlign: 'center'}}>Something went wrong. Please try reloading the page</span>\n        </div>\n    )\n}\n\nexport default Error;","import {useState, useCallback} from 'react';\n\nconst useHttp = () => {\n    const [process, setProcess] = useState('waiting');\n\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-type': 'application/json'}) => {\n        setProcess('loading');\n\n        try {\n            const response = await fetch(url, {method, body, headers});\n\n            if (!response.ok) {  \n                throw new Error(`Could not fetch${url}, status ${response.status}`);\n            }\n\n            const data = await response.json();\n            return data;\n        } catch(e) {\n            setProcess('error');\n            throw e;\n        }\n    }, [])\n\n    const clearError = useCallback(() => {\n        setProcess('loading');\n    }, [])\n\n    return { request, clearError, process, setProcess}\n}\n\nexport default useHttp;","import useHttp from \"../hooks/http.hook\";\n\nconst useMarvelService = () => {\n\n    const {request, clearError, process, setProcess} = useHttp();\n\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\n    const _apiKey = 'apikey=ee5953dc31f3d6f456feeaafb26f8003';\n    const _baseOffset = 180;\n\n    \n    const getAllCharacters = async (offset = _baseOffset) => {\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`)\n        return res.data.results.map(_transformCharacter);\n    }\n\n    const getCharacter = async (id) => {\n        const res = await request(`${_apiBase}/characters/${id}?${_apiKey}`);\n        return _transformCharacter(res.data.results[0]);\n    }\n\n    const getComic = async (id) => {\n        const res = await request(`${_apiBase}/comics/${id}?${_apiKey}`);\n        return _transformComics(res.data.results[0]);\n    }\n\n    const getAllComics = async (offset = _baseOffset) => {\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`)\n        return res.data.results.map(comics => _transformComics(comics));\n    }\n\n    const getCharacterByName = async (name) => {\n        try {\n            const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`)\n            return _transformCharacter(res.data.results[0], false);\n        } catch (e) {\n           return 'not found';\n        }\n    }\n\n    const _transformCharacter = (char, limitLetters = true) => {\n\n        let charDescription = char.description ? char.description : \"Unfortunately, we can't find the description of this character\"; \n\n        if (charDescription.length >= 200 && limitLetters) {\n            charDescription = charDescription.slice(0, 200) + '...';\n        }\n\n        return {\n            comics: char.comics.items,\n            id: char.id,\n            name: char.name,\n            description: charDescription,\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\n            homepage: char.urls[0].url,\n            wiki: char.urls[1].url\n        }\n    }\n\n    const _transformComics = (comics) => {\n        return {\n            id: comics.id,\n            name: comics.title,\n            description: comics.description ? comics.description : 'There is no description of this comic' ,\n            pageCount: comics.pageCount ?  `${comics.pageCount} pages` : 'No information about the number of the pages',\n            url: comics.urls[0].url,\n            price: comics.prices[0].price,\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\n            language: comics.textObjects.language || 'en-rus'\n        }\n    }\n\n    return {\n        process,\n        setProcess,\n        getAllCharacters, \n        getCharacter, \n        getAllComics, \n        clearError, \n        getComic, \n        getCharacterByName}\n\n}\n\nexport default useMarvelService;","import './skeleton.scss';\n\nconst Skeleton = (props) => {\n    return (\n        <>\n            <p className=\"char__select\">{props.name}</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import {Component} from 'react';\nimport Error from '../error/Error';\n\nclass ErrorBoundary extends Component {\n    state = {\n        hasError: false\n    }\n\n    componentDidCatch(error, errorInfo) {\n        console.log(error, errorInfo);\n    }\n\n    static getDerivedStateFromError(error) {\n        return { hasError: true };\n      }\n\n    render() {\n        if (this.state.hasError) {\n            return (\n                <Error/>\n            )\n        }\n        \n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;","export default __webpack_public_path__ + \"static/media/Avengers.4065c8f9.png\";","export default __webpack_public_path__ + \"static/media/Avengers_logo.9eaf2193.png\";","import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;"],"sourceRoot":""}