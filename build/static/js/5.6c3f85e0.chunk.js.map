{"version":3,"sources":["resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/charSearch/CharSearch.js","resources/img/vision.png","components/pages/MainPage.js","components/error/error.gif","components/error/Error.js","hooks/http.hook.js","services/service.js","components/skeleton/Skeleton.js","utils/setContent.js","components/errorBoundary/ErrorBoundary.js"],"names":["RandomCharBlock","data","name","description","thumbnail","homepage","wiki","imgStyle","className","src","alt","style","href","RandomChar","useState","char","setChar","useEffect","getRandomCharacter","useMarvelService","process","setProcess","getCharacter","clearError","id","Math","floor","random","then","res","onCharLoaded","setContent","onClick","mjolnir","CharList","props","getAllCharacters","chars","setChars","offset","setOffset","loadingNewChars","setLoadingNewChars","charsCapReached","setCharsCap","requestCharacters","initial","onFinishedLoading","newCharacters","ended","length","refsItems","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","content","useMemo","Component","Spinner","Error","setListContent","arr","blocks","map","i","imgStyles","tabIndex","ref","el","onSelectChar","onKeyPress","e","key","createContent","disabled","Content","comics","filteredComicID","resourceURI","replace","slice","to","CharInfo","createCharacter","CharSearch","loading","error","getCharacterByName","loadingMessage","errorMessage","initialValues","charName","validationSchema","Yup","required","onSubmit","formik","handleSubmit","htmlFor","type","placeholder","component","color","isActive","MainPage","charSelectedId","Helmet","ErrorBoundary","position","decoration","img","margin","height","width","display","textAlign","useHttp","request","useCallback","url","method","body","headers","fetch","response","ok","status","json","_apiBase","_apiKey","_baseOffset","results","_transformCharacter","getComic","_transformComics","getAllComics","limitLetters","charDescription","items","path","extension","urls","title","pageCount","price","prices","language","textObjects","Skeleton","state","hasError","errorInfo","console","log","this","children"],"mappings":"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","file":"static/js/5.6c3f85e0.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import {useState, useEffect} from 'react';\nimport useMarvelService from '../../services/service';\nimport setContent from '../../utils/setContent';\n\nimport './randomChar.scss';\n\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n\n    const [char, setChar] = useState({});\n\n    useEffect(() => {\n        getRandomCharacter();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [] )\n\n    const {process, setProcess, getCharacter, clearError} = useMarvelService();\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const getRandomCharacter = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n        getCharacter(id)\n            .then(res => {onCharLoaded(res)})\n            .then(() => setProcess('confirmed'))\n    }\n\n    return (\n        <div className=\"randomchar\">\n            {setContent(process, RandomCharBlock, char)}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button className=\"button button__main\">\n                    <div className=\"inner\" onClick={getRandomCharacter}>try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )\n}\n\nconst RandomCharBlock = ({data}) => {\n    const {name, description, thumbnail, homepage, wiki} = data;\n\n    let imgStyle = {'objectFit':'cover'};\n\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit':'contain'}\n    }\n\n    return (\n\n        <div className=\"randomchar__block\">\n        <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle}/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a  href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import React, {useState, useEffect, useRef, useMemo} from 'react';\nimport useMarvelService from '../../services/service';\nimport Spinner from '../spinner/Spinner';\nimport Error from '../error/Error';\n\nimport './charList.scss';\n\nimport PropTypes from 'prop-types';\n\nconst setListContent = (process, Component, loadingNewChars) => {\n    switch (process) {\n        case 'waiting': \n            return <Spinner/>;\n        case 'loading':\n            return loadingNewChars ? <Component/> : <Spinner/>;\n        case 'error':\n            return <Error/>;\n        case 'confirmed':\n            return <Component/>;\n        default: \n            throw new Error('Unexpected process state');\n    }\n}\n\nconst CharList = (props) => {\n\n    const {getAllCharacters, process, setProcess} = useMarvelService();\n\n    const [chars, setChars] = useState([]);\n    const [offset, setOffset] = useState(180);\n    const [loadingNewChars, setLoadingNewChars] = useState(true);\n    const [charsCapReached, setCharsCap] = useState(false);\n\n    useEffect(() => {\n        requestCharacters(offset, true);   \n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const requestCharacters = (offset, initial) => {\n        initial ? setLoadingNewChars(false) : setLoadingNewChars(true)\n \n        getAllCharacters(offset)\n            .then(res => onFinishedLoading(res))\n            .then(() => setProcess('confirmed'))\n    }\n\n    const onFinishedLoading = (newCharacters) => {\n\n        let ended = false;\n        if (newCharacters.length < 9) ended = true;\n\n        setChars(chars => [...chars, ...newCharacters]);\n        setOffset(offset => offset + 9);\n        setLoadingNewChars(false);\n        setCharsCap(ended);\n    }\n\n    const refsItems = useRef([]);\n\n    const focusOnItem = (id) => {\n       refsItems.current.forEach(item => {\n           item.classList.remove('char__item_selected');\n       })\n       refsItems.current[id].classList.add('char__item_selected');\n       refsItems.current[id].focus();\n    }\n\n    const createContent = (arr) => {\n\n        const blocks = arr.map((item, i) => {\n\n            let imgStyles = {'objectFit':'cover'};\n\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg' ) {\n                imgStyles = {'objectFit':'unset'}\n            }\n            \n            return (\n                <li className=\"char__item\" \n                key={item.id}\n                tabIndex={0}\n                ref={el => refsItems.current[i] = el}\n                onClick={() => {\n                    props.onSelectChar(item.id);\n                    focusOnItem(i)\n                    }}\n                onKeyPress={(e) => {\n                    if (e.key === ' ' || e.key === 'Enter') {\n                        props.onSelectChar(item.id);\n                        focusOnItem(i);\n                    }\n                }}>\n                    <img src={item.thumbnail} alt={item.name} style={imgStyles}/>\n                    <div className=\"char__name\">{item.name}</div>\n                </li>\n            )\n        })\n\n        return (\n            <ul className=\"char__grid\" >\n                {blocks}\n            </ul>\n        )\n    }\n\n    const content = useMemo(() => {\n        return setListContent(process, () => createContent(chars), loadingNewChars)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [process])\n\n    return (\n        <div className=\"char__list\">\n            {content}\n            <button className=\"button button__main button__long\"\n                    onClick={() => requestCharacters(offset, false)}\n                    disabled={loadingNewChars}\n                    style={{'display' : charsCapReached ? 'none' : 'block'}}\n                    tabIndex={0}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n        )\n}\n\nCharList.propTypes = {\n    onSelectChar: PropTypes.func.isRequired\n}\n\nexport default CharList;","/* eslint-disable no-unreachable */\nimport {useState, useEffect} from 'react';\nimport useMarvelService from '../../services/service';\n\nimport { Link } from 'react-router-dom';\n\nimport setContent from '../../utils/setContent';\n\nimport './charInfo.scss';\n\nimport PropTypes from 'prop-types';\n\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null);\n\n    const {process, setProcess, getCharacter, clearError} = useMarvelService();\n\n    useEffect( () => {  \n        createCharacter();\n        // eslint-disable-next-line\n    }, [props.id] )\n    \n    const createCharacter = () => {\n        \n        const {id} = props;\n\n        if(!id) {\n            return;\n        }\n\n        clearError();\n        getCharacter(id)   \n        .then(res => onFinishedLoading(res))\n        .then(() => setProcess('confirmed'))\n    }\n\n    const onFinishedLoading = (char) => {\n        setChar(char);\n    }\n\n    return (\n        <>\n            <div className=\"char__info\">\n                {setContent(process, Content, char)}\n            </div>\n\n        </>\n    )\n\n}\n\nconst Content = ({data}) => {\n    \n    const {name, description, thumbnail, homepage, wiki, comics} = data;\n\n    let imgStyle = {'objectFit':'cover'};\n\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit':'contain'};\n    }\n    \n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={imgStyle}/>\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length > 0 ? null : \"Unfortunately, we can't find the comics for this character\"}\n                {comics.map( (item, i) => {     \n                    \n                    const filteredComicID = item.resourceURI.replace(/\\D/g, '').slice(1);    \n                \n                    if (i < 10) {\n                        return (\n                            <Link className=\"char__comics-item\" key={i} to={`/comics/${filteredComicID}`}>\n                                {item.name}\n                            </Link>\n                        )\n                    } else return null;\n                })}\n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    id: PropTypes.number\n}\n\nexport default CharInfo;","import useMarvelService from '../../services/service';\n\nimport { useState } from 'react';\n\nimport { NavLink } from 'react-router-dom';\n\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage} from 'formik';\nimport * as Yup from 'yup';\n\nimport './charSearch.scss';\n\nconst CharSearch = () => {\n    const [char, setChar] = useState(null);\n\n    const {loading, error, getCharacterByName, clearError} = useMarvelService();\n\n    const updateChar = (name) => {\n        clearError()\n\n        getCharacterByName(name)\n            .then(res => res ? setChar(res): null)\n    }\n\n    const results = () => {\n        if (char === 'not found') {\n            return (\n                <div className=\"wrapper__not-found\">\n                    The character was not found. Check the name and try again. \n                    <br/>*The search is case-sensitive\n                </div> \n            )\n        } else if (char) {\n            return (\n                <div className=\"wrapper__found\">\n                    <div>Character found! Visit {char.name}'s page?</div>\n                    <NavLink \n                        to={`./characters/${char.name}`}\n                        className={({ isActive }) => \n                      ({color: isActive ? '#9F0013' : 'inherit'})}>\n                        <button className=\"button button__secondary\">\n                            <div className=\"inner\">To Page</div>\n                        </button>\n                    </NavLink>  \n                </div> \n            )\n        }\n    }   \n        \n    const loadingMessage = loading ? 'loading...' : null;\n    const errorMessage = !loading && error ? 'error' : null;\n        \n    return (\n        <div className='form'>\n            <Formik \n                initialValues={{\n                    charName: ''\n                }}\n                validationSchema={Yup.object({\n                    charName: Yup.string()\n                        .required('Obligatory field')\n                })}\n                onSubmit = {({charName}) => {\n                    updateChar(charName);\n                }}>\n                    {formik => (\n                        <Form onSubmit={formik.handleSubmit}>\n                            <label className=\"label\" htmlFor=\"search\">Or find a character by name:</label>\n                            <div className=\"wrapper\">\n                                <Field\n                                    className=\"input\"\n                                    type=\"text\"\n                                    name=\"charName\"\n                                    id=\"charName\"\n                                    placeholder=\"Enter name\"/>\n                                <button type=\"submit\" className=\"button button__main\">\n                                    <div className=\"inner\">Find</div>\n                                </button>\n                            </div>\n                            <FormikErrorMessage component=\"div\" className=\"wrapper__not-found\" name=\"charName\" />\n                        </Form>\n                    )}\n            </Formik>\n            {results()}\n            {loadingMessage}\n            {errorMessage}\n        </div>\n    )\n}\n\nexport default CharSearch;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import {useState} from 'react';\nimport {Helmet} from \"react-helmet\";\n\nimport RandomChar from \"../randomChar/RandomChar\";\nimport CharList from \"../charList/CharList\";\nimport CharInfo from \"../charInfo/CharInfo\";    \nimport CharSearch from '../charSearch/CharSearch';\nimport ErrorBoundary from '../errorBoundary/ErrorBoundary';\n\nimport decoration from '../../resources/img/vision.png';\n\nconst MainPage = () => {\n\n    const [charSelectedId, setChar] = useState(null);\n\n    const onSelectChar = (id) => {\n        setChar(id)\n    }\n\n    return (\n        <>\n            <Helmet>\n                <title>Marvel information portal</title>\n                <meta name=\"description\" content=\"Marvel information portal\" />\n            </Helmet>\n            <ErrorBoundary>\n                <RandomChar/>\n            </ErrorBoundary>\n            <div className=\"char__content\">\n                <ErrorBoundary>\n                    <CharList onSelectChar={onSelectChar}/>\n                </ErrorBoundary>\n                <ErrorBoundary>\n                    <div style={{position: '-webkit-sticky',\n                                // eslint-disable-next-line no-dupe-keys\n                                position: 'sticky',\n                                top:'0px'}}>\n                        <ErrorBoundary>\n                            <CharInfo id={charSelectedId}/>\n                            <CharSearch/>\n                        </ErrorBoundary> \n                    </div>\n                </ErrorBoundary>\n            </div>\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\n        </>\n    )\n}\n\nexport default MainPage;","export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif';\n\nconst Error = () => {\n    return (\n        <div style={{'display': 'flex', \n                     'flexDirection':'column',\n                     'fontWeight': 'bold',\n                     'fontSize': '18px',\n                     'lineHeight': '29px'}}>\n            <img src={img} alt=\"Error\" style={{margin:' 0 auto', \n            height:'250px', \n            width:'250px', \n            display:'block'}}/>\n            <span style={{color: '#9F0013', textAlign: 'center'}}>Something went wrong. Please try reloading the page</span>\n        </div>\n    )\n}\n\nexport default Error;","import {useState, useCallback} from 'react';\n\nconst useHttp = () => {\n    const [process, setProcess] = useState('waiting');\n\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-type': 'application/json'}) => {\n        setProcess('loading');\n\n        try {\n            const response = await fetch(url, {method, body, headers});\n\n            if (!response.ok) {  \n                throw new Error(`Could not fetch${url}, status ${response.status}`);\n            }\n\n            const data = await response.json();\n            return data;\n        } catch(e) {\n            setProcess('error');\n            throw e;\n        }\n    }, [])\n\n    const clearError = useCallback(() => {\n        setProcess('loading');\n    }, [])\n\n    return { request, clearError, process, setProcess}\n}\n\nexport default useHttp;","import useHttp from \"../hooks/http.hook\";\n\nconst useMarvelService = () => {\n\n    const {request, clearError, process, setProcess} = useHttp();\n\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\n    const _apiKey = 'apikey=ee5953dc31f3d6f456feeaafb26f8003';\n    const _baseOffset = 180;\n\n    \n    const getAllCharacters = async (offset = _baseOffset) => {\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`)\n        return res.data.results.map(_transformCharacter);\n    }\n\n    const getCharacter = async (id) => {\n        const res = await request(`${_apiBase}/characters/${id}?${_apiKey}`);\n        return _transformCharacter(res.data.results[0]);\n    }\n\n    const getComic = async (id) => {\n        const res = await request(`${_apiBase}/comics/${id}?${_apiKey}`);\n        return _transformComics(res.data.results[0]);\n    }\n\n    const getAllComics = async (offset = _baseOffset) => {\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`)\n        return res.data.results.map(comics => _transformComics(comics));\n    }\n\n    const getCharacterByName = async (name) => {\n        try {\n            const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`)\n            return _transformCharacter(res.data.results[0], false);\n        } catch (e) {\n           return 'not found';\n        }\n    }\n\n    const _transformCharacter = (char, limitLetters = true) => {\n\n        let charDescription = char.description ? char.description : \"Unfortunately, we can't find the description of this character\"; \n\n        if (charDescription.length >= 200 && limitLetters) {\n            charDescription = charDescription.slice(0, 200) + '...';\n        }\n\n        return {\n            comics: char.comics.items,\n            id: char.id,\n            name: char.name,\n            description: charDescription,\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\n            homepage: char.urls[0].url,\n            wiki: char.urls[1].url\n        }\n    }\n\n    const _transformComics = (comics) => {\n        return {\n            id: comics.id,\n            name: comics.title,\n            description: comics.description ? comics.description : 'There is no description of this comic' ,\n            pageCount: comics.pageCount ?  `${comics.pageCount} pages` : 'No information about the number of the pages',\n            url: comics.urls[0].url,\n            price: comics.prices[0].price,\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\n            language: comics.textObjects.language || 'en-rus'\n        }\n    }\n\n    return {\n        process,\n        setProcess,\n        getAllCharacters, \n        getCharacter, \n        getAllComics, \n        clearError, \n        getComic, \n        getCharacterByName}\n\n}\n\nexport default useMarvelService;","import './skeleton.scss';\n\nconst Skeleton = (props) => {\n    return (\n        <>\n            <p className=\"char__select\">{props.name}</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Skeleton from \"../components/skeleton/Skeleton\";\nimport Error from \"../components/error/Error\";\nimport Spinner from \"../components/spinner/Spinner\";\n\nconst setContent = (process, Component, data) => {\n    switch (process) {\n        case 'waiting': \n            return <Skeleton name=\"Please select a character to see information\"/>;\n        case 'loading':\n            return <Spinner/>;\n        case 'error':\n            return <Error/>;\n        case 'confirmed':\n            return <Component data={data}/>;\n        default: \n            throw new Error('Unexpected process state');\n    }\n}\n\nexport default setContent","import {Component} from 'react';\nimport Error from '../error/Error';\n\nclass ErrorBoundary extends Component {\n    state = {\n        hasError: false\n    }\n\n    componentDidCatch(error, errorInfo) {\n        console.log(error, errorInfo);\n    }\n\n    static getDerivedStateFromError(error) {\n        return { hasError: true };\n      }\n\n    render() {\n        if (this.state.hasError) {\n            return (\n                <Error/>\n            )\n        }\n        \n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;"],"sourceRoot":""}